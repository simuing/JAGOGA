<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    <mapper namespace="com.gaja.member.IMemberDAO">

    <!-- 회원가입 -->
    
   	<!-- 회원 가입 - 회원코드 생성 -->
   	<insert id="addMemCode">
    	INSERT INTO TBL_MEMBERCODE(MEMCODE) 
    	VALUES(SEQMEMBERCODE.NEXTVAL)
   	</insert>
   	
   	<!-- 회원가입 - 회원생성 -->
   	<insert id="addMember">
    	INSERT INTO TBL_MEMBER(MEMCODE, MEMID, MEMPW, MEMNAME, MEMSSN, MEMTEL, MEMEMAIL, MEMETIQUETTE, MEMPROFILE, MEMJOINDATE)
		VALUES( (SELECT MAX(MEMCODE) FROM TBL_MEMBERCODE), #{memId}, CRYPTPACK.ENCRYPT(#{memPw}, #{memPw}), #{memName}, #{memSsn}, #{memTel}, #{memEmail}, DEFAULT, NULL, SYSDATE)
   	</insert>
   	
   	<!-- 아이디 중복 확인 -->
   	<select id="checkDuplicate" resultType="java.lang.Integer">
    	SELECT COUNT(*)
		FROM TBL_MEMBER M LEFT JOIN TBL_LEAVEMEMBER L
		ON M.MEMID != L.LMEMID
		WHERE M.MEMID=#{memId}
		   OR L.LMEMID=#{memId}
   	</select>
   	
   	<!-- 등록된 휴대폰번호인지 확인 -->
   	<select id="checkValidTel" resultType="java.lang.Integer">
   		SELECT COUNT(*)
   		FROM TBL_MEMBER
   		WHERE MEMTEL = #{memTel}
   	</select>
   	
   	<!-- 등록된 아이디인지 확인 -->
   	<select id="checkValidId" resultType="java.lang.Integer">
   		SELECT COUNT(*)
   		FROM TBL_MEMBER
   		WHERE MEMID = #{memId}
   	</select>
   	
   	<!-- 등록된 휴대폰번호로 아이디 확인 -->
   	<select id="findId" resultType="java.lang.String">
   		SELECT MEMID
   		FROM TBL_MEMBER
   		WHERE MEMTEL = #{memTel}
   	</select>



	<!-- 로그인 -->

	<!-- 로그인 유효성검사 -->
	<select id="loginCheck" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM TBL_MEMBER M LEFT JOIN TBL_BLOCKLIST BL
		ON M.MEMCODE = BL.MEMCODE
		WHERE MEMID = #{memId}
		AND MEMPW = CRYPTPACK.ENCRYPT(#{memPw}, #{memPw})
		AND BLISTCODE IS NULL
	</select>

	<!-- 회원코드, 회원이름 추출 -->
	<select id="login" resultType="com.gaja.dto.MemberDTO">
		SELECT MEMCODE, MEMNAME
		FROM TBL_MEMBER
		WHERE MEMID = #{memId}
		AND MEMPW = CRYPTPACK.ENCRYPT(#{memPw}, #{memPw})
	</select>

	<!-- 회원코드로 회원이름을 추출하는 메소드 -->
	<!-- <select id="getMemberName" resultType="java.lang.String"> SELECT MEMNAME 
		FROM TBL_MEMBER WHERE MEMCODE = #{memCode} </select> -->

	<!-- 회원코드로 비밀번호 조회하는 메소드 -->
	<select id="getMemberPw" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM TBL_MEMBER
		WHERE MEMCODE=#{memCode}
		AND MEMPW=CRYPTPACK.ENCRYPT(#{memPw},#{memPw})
	</select>
      


   	
   	<!-- 아이디 / 비밀번호 찾기 -->
   	
   	<!-- 아이디와 전화번호가 서로 맞는 것인지 확인 -->
   	<select id="matchIdTel" resultType="java.lang.Integer">
   		SELECT COUNT(*)
   		FROM TBL_MEMBER
   		WHERE MEMTEL = #{memTel}
   		AND MEMID = #{memId}
   	</select>
   	

   	
  	 <!-- 회원정보수정 -->
     
     <!-- 내정보 조회 -->
     <select id="memInfo" resultType="com.gaja.dto.MemberDTO">
      SELECT MEMID, MEMNAME, SUBSTR(MEMSSN,1,6)||'-'||SUBSTR(MEMSSN,7,1)||'*****' AS MEMSSN, MEMTEL, MEMEMAIL, MEMETIQUETTE, MEMPROFILE 
      FROM TBL_MEMBER WHERE MEMCODE=#{memCode}
     </select>
  
     <!-- 회원 정보 수정 -->
     <update id="memModify">
      UPDATE TBL_MEMBER
     SET MEMPW=CRYPTPACK.ENCRYPT(#{memPw},#{memPw}), MEMTEL=#{memTel}
       , MEMEMAIL=#{memEmail}, MEMPROFILE=#{memProfile}
     WHERE MEMCODE=#{memCode}
     </update>
   	
   	<!-- 회원 비밀번호 수정 -->
   	<update id="passwordChange">
    	UPDATE TBL_MEMBER
		SET MEMPW=CRYPTPACK.ENCRYPT(#{memPw},#{memPw})
		WHERE MEMID=#{memId}
   	</update>
   	
   	<!-- 비밀번호 받기 -->
   	<select id="checkLoginPw" resultType="java.lang.Integer">
   		SELECT COUNT(*)
		FROM TBL_MEMBER
		WHERE MEMID = #{memId}
		AND MEMPW = CRYPTPACK.ENCRYPT(#{memPw}, #{memPw})
   	</select>
   	
   	
   	
   	<!-- 회원탈퇴 -->
   	
	<!-- 회원코드를 통해 등록한 숙소가 존재하는지 여부 확인 -->
	<select id="roomCount" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM VIEW_MYROOMLIST
		WHERE MEMCODE=#{memcode}
	</select>
	
    <!-- 진행중인 예약내역이 있는지 확인 -->
    <select id="bookingCheck" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM VIEW_BOOKING
		WHERE GMEMCODE=#{memcode}
	</select>
	
   	<!-- 회원 탈퇴 -->
   	<delete id="leaveMember" statementType="CALLABLE">
 			{ call PROC_LEAVEMEMBER(#{memCode}) }
   	</delete>
   	
   	
   	
</mapper>